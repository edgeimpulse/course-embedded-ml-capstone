/**
 * The code below can be used for inference in Arduino
 */

// Include the name of the Edge Impulse SDK library you imported. This will 
// switch between Arduino and computer libraries as needed.
#ifdef ARDUINO
    #include <magic-wand-capstone_inferencing.h>
#else
    #include "imu-emulator.h"
    #include "edge-impulse-sdk/classifier/ei_run_classifier.h"
#endif

// Function declarations
static int get_signal_data(size_t offset, size_t length, float *out_ptr);

// Settings
static const int debug_nn = false;

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {
    0.1777, 0.2307, 1.4699, 0.1981, 0.2088, 1.8669, -0.1139, 0.4792, 1.3681, -0.0296, 0.4598, 1.9170, 0.4229, 0.7710, 1.1994, -0.1783, 0.8474, 1.9446, 0.3666, 0.9441, 1.1252, -0.1099, 0.9028, 1.8564, 0.4527, 1.0335, 1.0830, 0.1443, 0.9386, 1.7264, 0.5323, 1.0670, 1.0670, 0.5206, 0.9273, 1.5875, 0.4991, 1.0293, 1.0597, 0.9751, 0.8908, 1.4474, 0.3600, 0.9874, 0.9957, 1.6105, 0.9219, 1.2430, 0.1976, 0.9749, 0.9302, 1.6486, 1.0042, 1.1951, 0.1744, 0.9930, 0.8735, 1.5098, 1.1288, 1.1438, 0.1711, 0.9846, 0.8080, 1.2254, 1.2766, 1.0644, 0.1479, 0.9539, 0.7091, 0.8431, 1.4389, 0.9548, 0.1380, 0.9330, 0.6044, 0.0387, 1.7739, 0.7067, 0.0617, 0.8995, 0.4211, -0.2526, 1.9087, 0.5904, 0.0849, 0.9274, 0.3484, -0.4577, 2.0082, 0.4940, 0.2175, 0.9721, 0.2305, -0.6142, 2.0762, 0.4180, 0.3335, 1.0391, 0.0530, -0.7354, 2.1132, 0.3408, 0.2572, 1.0391, 0.0225, -0.8185, 2.0768, 0.1418, 0.4991, 1.1731, -0.0502, -0.9650, 1.9277, 0.0239, 0.2771, 1.3379, -0.1448, -0.9455, 1.7989, -0.1375, 0.4196, 1.3072, -0.1870, -0.8947, 1.7346, -0.2318, 0.5654, 1.2932, -0.2859, -0.7902, 1.6892, -0.3222, 0.4958, 1.2820, -0.4125, -0.6758, 1.6362, -0.4319, 0.4428, 1.1759, -0.5958, -0.4774, 1.4967, -0.6601, 0.4759, 1.1941, -0.6394, -0.4793, 1.3709, -0.7482, 0.4063, 1.2346, -0.7601, -0.5565, 1.2241, -0.8105, 0.4163, 1.2080, -0.8256, -0.6728, 1.1371, -0.8519, 0.4958, 1.1759, -0.8358, -0.8654, 1.0804, -0.8992, 0.5289, 1.1438, -0.8896, -1.3609, 0.9321, -1.0646, 0.5289, 1.0279, -0.8401, -1.5574, 0.8432, -1.1666, 0.4792, 0.9427, -0.8271, -1.6688, 0.7465, -1.2707, 0.4660, 0.8506, -0.8198, -1.7098, 0.6357, -1.3605, 0.4097, 0.7515, -0.8314, -1.6874, 0.5110, -1.4366, 0.2307, 0.6537, -0.8547, -1.6150, 0.2768, -1.5507, 0.1744, 0.4499, -0.9551, -1.4733, 0.1665, -1.5672, 0.1313, 0.3507, -1.0278, -1.4362, 0.0448, -1.5733, 0.0783, 0.2488, -1.0904, -1.4538, -0.0786, -1.5722, 0.0286, 0.1539, -1.1325, -1.5262, -0.2020, -1.5639, -0.0310, 0.0659, -1.1427, -1.6503, -0.3314, -1.5512, -0.1636, -0.0933, -1.0002, -1.9337, -0.6152, -1.4907, -0.2000, -0.1700, -0.9100, -2.0431, -0.7774, -1.4421, -0.2100, -0.2650, -0.8198, -2.1243, -0.9438, -1.3776, -0.2464, -0.3613, -0.7252, -2.1702, -1.1024, -1.3005, -0.2762, -0.4479, -0.6001, -2.2024, -1.2454, -1.2090, -0.1934, -0.6294, -0.4197, -2.1760, -1.5007, -0.9896, 0.0816, -0.7537, -0.3674, -2.1076, -1.5829, -0.9081, 0.1081, -0.8430, -0.3223, -2.0393, -1.6241, -0.8695, 0.0154, -0.9142, -0.2423, -1.9630, -1.6544, -0.8469, -0.1039, -0.9910, -0.1288, -1.8506, -1.6903, -0.8210, -0.2265, -1.0664, 0.0080, -1.5045, -1.8018, -0.7047, -0.4651, -1.2284, 0.2800, -1.2827, -1.8655, -0.6010, -0.4485, -1.2968, 0.3905, -1.0520, -1.9120, -0.4671, -0.3458, -1.3513, 0.4604, -0.8185, -1.9085, -0.3117, -0.2398, -1.4043, 0.5171, -0.6142, -1.8613, -0.1437, -0.2100, -1.4043, 0.5433, -0.4226, -1.7910, 0.1848, -0.1503, -1.3527, 0.6058, -0.2349, -1.7612, 0.3661, -0.0907, -1.3108, 0.6786, -0.1675, -1.7135, 0.5403, -0.0675, -1.2340, 0.7571, -0.0990, -1.6617, 0.6935, -0.0343, -1.1628, 0.8473, -0.0228, -1.6110, 0.8280, 0.0054, -1.0971, 0.9259, 0.0847, -1.5639, 0.9498, 0.1744, -1.0050, 1.0452, 0.3467, -1.4517, 1.1598, 0.1976, -0.9575, 1.0699, 0.4679, -1.4029, 1.2430, 0.1810, -0.9059, 1.0670, 0.5646, -1.3409, 1.3245, 0.1446, -0.8612, 1.0641, 0.6242, -1.2568, 1.4062, 0.1578, -0.8151, 1.0728, 0.6526, -1.1507, 1.4893, 0.1744, -0.7718, 1.1863, 0.6750, -0.9396, 1.6316, 0.0949, -0.6378, 1.2343, 0.6819, -0.8853, 1.7092, -0.0874, -0.5903, 1.1877, 0.6809, -0.8871, 1.8261, -0.0708, -0.5275, 1.1354, 0.6585, -0.8585, 1.9738, -0.1569, -0.4367, 1.0844, 0.5597, -0.7160, 2.1325, -0.2365, -0.3055, 1.1106, 0.1962, -0.2813, 2.4395, -0.2895, 0.1441, 1.1935, 0.0328, -0.1084, 2.5690, -0.1967, 0.3563, 1.2197, -0.0630, 0.0388, 2.6534, -0.0542, 0.5769, 1.2285, -0.1137, 0.1825, 2.6765, 0.1280, 0.7445, 1.1528, -0.0873, 0.3233, 2.6390, 0.3666, 0.8059, 1.0597, 0.0114, 0.4693, 2.3541, 0.6151, 0.8366, 0.9055, 0.2215, 0.7084, 2.1231, 0.4859, 0.8380, 0.8706, 0.3222, 0.7711, 1.8829, 0.2109, 0.8785, 0.8575, 0.3915, 0.7842, 1.6884, 0.1015, 0.9441, 0.8895, 0.4053, 0.8038, 1.5687, 0.1843, 1.0363, 0.8953, 0.3741, 0.8396, 1.5042, 0.2440, 1.1606, 0.8619, 0.2655, 0.9624, 1.3709, 0.4163, 1.2080, 0.8313, 0.1307, 1.0441, 1.2656, 0.5455, 1.2122, 0.7237, -0.0160, 1.1383, 1.1356, 0.5919, 1.1661, 0.5447, -0.1959, 1.2451, 0.9912, 0.5985, 1.0796, 0.3658, -0.4041, 1.3750, 0.8412, 0.5654, 1.0014, 0.2160, -0.9083, 1.6207, 0.5707, 0.5555, 0.9190, -0.0139, -1.1146, 1.6762, 0.4714, 0.6582, 0.9120, -0.0750, -1.2270, 1.6827, 0.3837, 0.7973, 0.9120, -0.0982, -1.2416, 1.6499, 0.2885, 0.8835, 0.9050, -0.0837, -1.1322, 1.5849, 0.1672, 0.8868, 0.9260, -0.0371, -0.9319, 1.3882, -0.1299, 1.0591, 1.0461, -0.0066, -0.4069, 1.3100, -0.2765, 1.1486, 1.1103, -0.0459, -0.1840, 1.2516, -0.4302, 1.1585, 1.2108, -0.0662, -0.0737, 1.2128, -0.6127, 1.1486, 1.3169, -0.0633, -0.0737, 1.1949, -0.8105, 1.1254, 1.3546, -0.1041, -0.1783, 1.1884, -0.9946, 1.1684, 1.4175, -0.1462, -0.5849, 1.1974, -1.3159, 1.2413, 1.4384, -0.2393, -0.8028, 1.1860, -1.4697, 1.2281, 1.4035, -0.3834, -0.9817, 1.1449, -1.6267 
};

// Wrapper for raw input buffer
static signal_t sig;

// Setup function that is called once as soon as the program starts
void setup() {

    // Start serial port (Arduino only)
#ifdef ARDUINO
    Serial.begin(115200);
#endif

    // Print something to the terminal
    ei_printf("Sequential inference test\r\n");

    // Start accelerometer (part of IMU)
    if (!IMU.begin()) {
        ei_printf("ERROR: Failed to initialize IMU!\r\n");
        while (1);
    }

    // TEST
    float x = 0;
    float y = 0;
    float z = 0;
    IMU.readAcceleration(x, y, z);
    printf("%f %f %f\r\n", x, y, z);
    IMU.readGyroscope(x, y, z);
    printf("%f %f %f\r\n", x, y, z);
    
    

    // Assign callback function to fill buffer used for preprocessing/inference
    sig.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    sig.get_data = &get_signal_data;
}

// Loop function that is called repeatedly after setup()
void loop() {

    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Perform DSP pre-processing and inference
    res = run_classifier(&sig, &result, false);

    // Print return code and how long it took to perform inference
    ei_printf("run_classifier returned: %d\r\n", res);
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n", 
            result.timing.dsp, 
            result.timing.classification, 
            result.timing.anomaly);

    // Print inference/prediction results
    ei_printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }

    // Wait 100 ms before running inference again
    ei_sleep(100);
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}